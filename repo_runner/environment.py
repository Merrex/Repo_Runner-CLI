"""
Environment setup and configuration management.
"""

import os
import shutil
from pathlib import Path
from typing import Dict, Any
from .logger import get_logger


class EnvironmentManager:
    """Manages environment variables and configuration."""
    
    def __init__(self, path: Path, config: Dict = None, dry_run: bool = False):
        self.path = path
        self.config = config or {}
        self.dry_run = dry_run
        self.logger = get_logger()
    
    def setup(self, structure: Dict[str, Any]):
        """Setup environment variables and configuration."""
        self._setup_env_files()
        self._setup_project_config(structure)
        self._validate_environment()
    
    def _setup_env_files(self):
        """Setup .env files from examples or create defaults."""
        env_file = self.path / '.env'
        env_example = self.path / '.env.example'
        env_local = self.path / '.env.local'
        
        # If .env doesn't exist but .env.example does, copy it
        if not env_file.exists() and env_example.exists():
            self.logger.info("Creating .env from .env.example")
            if not self.dry_run:
                shutil.copy(env_example, env_file)
        
        # If no .env file exists, create a basic one
        elif not env_file.exists():
            self.logger.info("Creating basic .env file")
            if not self.dry_run:
                self._create_basic_env_file(env_file)
        
        # Load environment variables
        self._load_env_file(env_file)
    
    def _create_basic_env_file(self, env_file: Path):
        """Create a basic .env file with common variables."""
        basic_env = """# Generated by repo_runner
# Environment configuration

# Application
NODE_ENV=development
PORT=3000
HOST=localhost

# Database
DATABASE_URL=sqlite:///./app.db

# Security
SECRET_KEY=your-secret-key-here
JWT_SECRET=your-jwt-secret-here

# API Keys (replace with your actual keys)
# API_KEY=your-api-key-here
"""
        
        with open(env_file, 'w') as f:
            f.write(basic_env)
    
    def _load_env_file(self, env_file: Path):
        """Load environment variables from .env file."""
        if not env_file.exists():
            return
        
        try:
            with open(env_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        key = key.strip()
                        value = value.strip().strip('"\'')
                        
                        # Don't override existing environment variables
                        if key not in os.environ:
                            os.environ[key] = value
        except Exception as e:
            self.logger.error(f"Error loading .env file: {e}")
    
    def _setup_project_config(self, structure: Dict[str, Any]):
        """Setup project-specific configuration."""
        project_type = structure.get('type', 'unknown')
        
        if project_type == 'django':
            self._setup_django_config()
        elif project_type in ['flask', 'fastapi', 'python-web']:
            self._setup_python_web_config()
        elif project_type in ['react', 'vue', 'angular', 'nextjs', 'nuxtjs']:
            self._setup_frontend_config()
        elif project_type == 'nodejs':
            self._setup_nodejs_config()
    
    def _setup_django_config(self):
        """Setup Django-specific configuration."""
        self.logger.info("Setting up Django configuration")
        
        # Set Django settings module if not set
        if 'DJANGO_SETTINGS_MODULE' not in os.environ:
            # Try to detect settings module
            settings_files = list(self.path.glob('**/settings.py'))
            if settings_files:
                settings_path = settings_files[0]
                relative_path = settings_path.relative_to(self.path)
                module_path = str(relative_path.with_suffix('')).replace(os.sep, '.')
                os.environ['DJANGO_SETTINGS_MODULE'] = module_path
                self.logger.info(f"Set DJANGO_SETTINGS_MODULE to {module_path}")
    
    def _setup_python_web_config(self):
        """Setup Python web framework configuration."""
        self.logger.info("Setting up Python web framework configuration")
        
        # Set common Python web app environment variables
        if 'FLASK_ENV' not in os.environ:
            os.environ['FLASK_ENV'] = 'development'
        
        if 'FLASK_DEBUG' not in os.environ:
            os.environ['FLASK_DEBUG'] = '1'
    
    def _setup_frontend_config(self):
        """Setup frontend framework configuration."""
        self.logger.info("Setting up frontend configuration")
        
        # Set common frontend environment variables
        if 'NODE_ENV' not in os.environ:
            os.environ['NODE_ENV'] = 'development'
    
    def _setup_nodejs_config(self):
        """Setup Node.js configuration."""
        self.logger.info("Setting up Node.js configuration")
        
        # Set Node.js environment variables
        if 'NODE_ENV' not in os.environ:
            os.environ['NODE_ENV'] = 'development'
        
        if 'PORT' not in os.environ:
            os.environ['PORT'] = '3000'
    
    def _validate_environment(self):
        """Validate that required environment variables are set."""
        self.logger.info("Validating environment configuration")
        
        # Check for common required variables
        required_vars = []
        warnings = []
        
        # Check for database URL
        if not os.environ.get('DATABASE_URL'):
            warnings.append("DATABASE_URL not set - using default SQLite")
        
        # Check for secret keys
        if not os.environ.get('SECRET_KEY'):
            warnings.append("SECRET_KEY not set - using default (not secure for production)")
        
        # Log warnings
        for warning in warnings:
            self.logger.warning(warning)
        
        # Log successful validation
        if not warnings:
            self.logger.info("✅ Environment validation passed")
        else:
            self.logger.info(f"⚠️  Environment validation completed with {len(warnings)} warnings")